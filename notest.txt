Amazon EC2 - get up virtual servers (instances), (windows, linux in some region) in Amazon
Elastic Load Balancer - balancer for requests
AWS Elastic Beanstalk - get up app from zip ... ( install all balancer and son on and app works )
Amazon CloudFront - for uploading caching static files
Amazon CloudWatch - monitoring servers and infrastructure
Amazon S3 ( Simple Storage Service ) - uploading diff bid files and storing (static files)
Amazon Glacier - uploading diff bid files and storing (static files) in zip
Amazon EFS - Amazon file system ( hard disc for connectiong to servers )
AWS CloudFormation - describing infrastructure ( updating infrastructure )
AWS OpsWorks - infrastructure ( recipie cheff )
Amazon RDS - relation data system ( sql based db )
Amazon DynamoDB - non sql based DynamoDB
Amazon Redshift - analyse data
Amazon EMR - big data
IAM - identity access manager ( create users, permissions, roles )
Amazon VPC - virtual privat cloud (  )
Amazon Route 53 - dns server Amazon ( domain name, dns works on port 53 )
Amazon SES - simple email services
Amazon SNS - send emails, sms
Amazon SQS - ... sms


---- 
Login
----
IAM - create users / groups ...


// Configure CLI on remote instance
aws configure <Access key ID>
<Secret access key>
<rankfurt>
json



// S3
different storages with diff access to recources




Firewall - soft ( give acces to something or not )


// S3 bucket ( 5Gb free )
first - directory
than - folder

*Versioning - save copy earlier saved files (aka git)
*Cross replication ( backup from one bucket to another )

* Logging ( save all logs (history-manipulation) of bucket)
* Lifecycle - ex.: - pass file after 30 days to Glacier


// INSTANCES
* on demand ( on off )
* reserved ( 1-3 year )

- type of servers ( num proccessors, memory, t2.nano - t поколение )
t - general purpose
m - general purpose
c - compute optimazed
f - fpga optimazed   
g,p - gpu optimaze
x,r -ram memory optimazed
d,i - storage optimazed

EBS - Elastic Block Store - hard disks

SSD ( GP@ ) up to 10.000 iops
IOPS SSD (IO1) 20.000
Magnetic
others:
 HDD (ST1)


 // Bootstrapping ( all setting immediatly )
 AWS CLI with EC2 ( on off inst from cli )
 Roles for EC2
 AMI - amazon mashine image

 Launch Configuration + Auto Scaling Group ( розмножаться умирать )


Instance - виртуальный сервер
Volume - HDD/SDD disk

Snapshot - резервная копия Volume

AMI - резервная копия Instance

AMI - Amazon Mashine Image


change volume ( right click on disk )


// Bootstrapping - Advanced details while creating instance ( insert script for lounch while instance is creating )



// Balancer


// Auto-scale groups ( can be authomatic )
vertical-scaling - ex.: from t2.micro - to c4.large ( more memory ) ( for web servers is not quit good )

horizontal-scaling - creating another copy of Instance ( many - Auto-scale groups in diff availability group )

automaticaly creates instance ( scaling out ) and than scaling in ( remove them )

auto-scale groups - uses only one Lounch Configuration

*Steps*
- Create Launch Configuration ( as creating instance, possible from AMIs (image) )



// ELASTIC API
 Private IP - адресс доступный внутри сети ( НЕизменяемый )
 Public IP - адресс доступный в интернете ( изменяемый )
 Elastic IP - адресс доступный в интернете ( амазоновский ) ( НЕизменяемый, внешний ) - для создания постоянного внейшнего ip


// CloudFormation - программирование инфраструктуры AWS as a code - IaaC
автоматизация создания и изменения инфраструктуры
CloudFormation Stack - контейнер с созданными ресурсами
CloudFormation Template - программный код контейнера - шаблон


// Roles to EC2, Users and others 
create in IAM and attach to instance ( right click on instance ), user and so on
ex.: role EC2 to create / read S3 bucket



// Info about Instance
from connected termonal to instance - curl http://169.254.169.254/latest/meta-data/


//  Виртуальные Сети VPC - Virtual Private Cloud (aka cisco) ( internal network )
Виртуальная сеть которую можна создать в амазоне

VPC - CIDR blocks
Public subnet -  ( part of vpc network ) all instances from this network has access to internet ( have public IP )
Private subnet - servers lounched in private subnets do not have public IP  ( have access to internet from 'nadserver' )
Database Subnet - private subnet without any internet access
Route Table
Internet Gateway
Nat Gateway
...
Security Group - ( access ports, when creating instance )
...
VPN Gateway


